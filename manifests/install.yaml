apiVersion: v1
kind: ServiceAccount
metadata:
  name: config-aggregator-sa
  namespace: numalogic-rollouts
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: config-aggregator-role
  namespace: numalogic-rollouts
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - update
  - delete
  - patch
  - get
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: numalogic-config-aggregator-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: config-aggregator-role-binding
  namespace: numalogic-rollouts
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: config-aggregator-role
subjects:
- kind: ServiceAccount
  name: config-aggregator-sa
  namespace: numalogic-rollouts
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aggregator-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: numalogic-config-aggregator-role
subjects:
- kind: ServiceAccount
  name: config-aggregator-sa
  namespace: numalogic-rollouts
---
apiVersion: v1
data:
  schema.json: |-
    {
      "title": "ServiceConf",
      "description": "ServiceConf(*, service: str = 'default', namespace: str = 'default', metric_configs: List[__main__.MetricConf] = None, unified_configs: List[__main__.UnifiedConf] = None)",
      "type": "object",
      "properties": {
        "service": {
          "title": "Service",
          "default": "default",
          "type": "string"
        },
        "namespace": {
          "title": "Namespace",
          "default": "default",
          "type": "string"
        },
        "metric_configs": {
          "title": "Metric Configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetricConf"
          }
        },
        "unified_configs": {
          "title": "Unified Configs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnifiedConf"
          }
        }
      },
      "definitions": {
        "ModelInfo": {
          "title": "ModelInfo",
          "description": "Schema for defining the model/estimator.\n\nArgs:\n    name: name of the model; this should map to a supported list of models\n          mentioned in the factory file\n    conf: kwargs for instantiating the model class\n    stateful: flag indicating if the model is stateful or not",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "default": "???",
              "type": "string"
            },
            "conf": {
              "title": "Conf",
              "type": "object"
            },
            "stateful": {
              "title": "Stateful",
              "default": true,
              "type": "boolean"
            }
          }
        },
        "LightningTrainerConf": {
          "title": "LightningTrainerConf",
          "description": "Schema for defining the Pytorch Lightning trainer behavior.\n\nMore details on the arguments are provided here:\nhttps://pytorch-lightning.readthedocs.io/en/stable/common/trainer.html#trainer-class-api",
          "type": "object",
          "properties": {
            "max_epochs": {
              "title": "Max Epochs",
              "default": 100,
              "type": "integer"
            },
            "logger": {
              "title": "Logger",
              "default": false,
              "type": "boolean"
            },
            "check_val_every_n_epoch": {
              "title": "Check Val Every N Epoch",
              "default": 5,
              "type": "integer"
            },
            "log_every_n_steps": {
              "title": "Log Every N Steps",
              "default": 20,
              "type": "integer"
            },
            "enable_checkpointing": {
              "title": "Enable Checkpointing",
              "default": false,
              "type": "boolean"
            },
            "enable_progress_bar": {
              "title": "Enable Progress Bar",
              "default": true,
              "type": "boolean"
            },
            "enable_model_summary": {
              "title": "Enable Model Summary",
              "default": true,
              "type": "boolean"
            },
            "limit_val_batches": {
              "title": "Limit Val Batches",
              "default": 0,
              "type": "boolean"
            },
            "callbacks": {
              "title": "Callbacks"
            }
          }
        },
        "RegistryConf": {
          "title": "RegistryConf",
          "description": "Registry config base class",
          "type": "object",
          "properties": {}
        },
        "NumalogicConf": {
          "title": "NumalogicConf",
          "description": "Top level config schema for numalogic.",
          "type": "object",
          "properties": {
            "model": {
              "$ref": "#/definitions/ModelInfo"
            },
            "trainer": {
              "$ref": "#/definitions/LightningTrainerConf"
            },
            "registry": {
              "$ref": "#/definitions/RegistryConf"
            },
            "preprocess": {
              "title": "Preprocess",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelInfo"
              }
            },
            "threshold": {
              "$ref": "#/definitions/ModelInfo"
            },
            "postprocess": {
              "$ref": "#/definitions/ModelInfo"
            }
          }
        },
        "MetricConf": {
          "title": "MetricConf",
          "description": "MetricConf(*, metric: str = 'default', composite_keys: List[str] = None, static_threshold: int = 3, static_threshold_wt: float = 0.0, scrape_interval: int = 30, retrain_freq_hr: int = 8, resume_training: bool = False, numalogic_conf: __main__.NumalogicConf = '???')",
          "type": "object",
          "properties": {
            "metric": {
              "title": "Metric",
              "default": "default",
              "type": "string"
            },
            "composite_keys": {
              "title": "Composite Keys",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "static_threshold": {
              "title": "Static Threshold",
              "default": 3,
              "type": "integer"
            },
            "static_threshold_wt": {
              "title": "Static Threshold Wt",
              "default": 0.0,
              "type": "number"
            },
            "scrape_interval": {
              "title": "Scrape Interval",
              "default": 30,
              "type": "integer"
            },
            "retrain_freq_hr": {
              "title": "Retrain Freq Hr",
              "default": 8,
              "type": "integer"
            },
            "resume_training": {
              "title": "Resume Training",
              "default": false,
              "type": "boolean"
            },
            "numalogic_conf": {
              "title": "Numalogic Conf",
              "default": "???",
              "allOf": [
                {
                  "$ref": "#/definitions/NumalogicConf"
                }
              ]
            }
          }
        },
        "UnifiedConf": {
          "title": "UnifiedConf",
          "description": "UnifiedConf(*, unified_metric_name: str, unified_metrics: List[str], unified_strategy: str = 'max')",
          "type": "object",
          "properties": {
            "unified_metric_name": {
              "title": "Unified Metric Name",
              "type": "string"
            },
            "unified_metrics": {
              "title": "Unified Metrics",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "unified_strategy": {
              "title": "Unified Strategy",
              "default": "max",
              "type": "string"
            }
          },
          "required": [
            "unified_metric_name",
            "unified_metrics"
          ]
        }
      }
    }
kind: ConfigMap
metadata:
  name: application-config-schema
  namespace: numalogic-rollouts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: numalogic-config-aggregator
  name: numalogic-config-aggregator
  namespace: numalogic-rollouts
spec:
  replicas: 1
  selector:
    matchLabels:
      app: numalogic-config-aggregator
  template:
    metadata:
      labels:
        app: numalogic-config-aggregator
    spec:
      containers:
      - args:
        - --configmap-name=numaproj-argorollouts-configs
        - --configmap-key=config.yaml
        - --app-config-label=numaprom.numaproj.io/component=argo-rollouts
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/numaio/numalogic-config-aggregator:latest
        name: aggregator
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - mountPath: /etc/config/config-aggregator
          name: application-config-schema
      securityContext:
        runAsNonRoot: true
        runAsUser: 7019
      serviceAccountName: config-aggregator-sa
      volumes:
      - configMap:
          name: application-config-schema
        name: application-config-schema
